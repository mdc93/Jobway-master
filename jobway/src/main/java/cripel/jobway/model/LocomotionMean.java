package cripel.jobway.model;
// Generated Feb 25, 2022, 8:26:41 PM by Hibernate Tools 4.3.5.Final

import static javax.persistence.GenerationType.IDENTITY;

import java.util.HashSet;
import java.util.Objects;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.ManyToMany;
import javax.persistence.Table;

/**
 * Locomotionmean generated by hbm2java
 */
@Entity
@Table(name = "locomotionmean", catalog = "jobway")
public class LocomotionMean implements java.io.Serializable {

	private Integer idLocomotionMean;
	private String locomotionMeanName;
	private boolean isDelete;
	private Set<Person> persons = new HashSet<>(0);

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "idLocomotionMean", unique = true, nullable = false)
	public Integer getIdLocomotionMean() {
		return this.idLocomotionMean;
	}

	public void setIdLocomotionMean(Integer idLocomotionMean) {
		this.idLocomotionMean = idLocomotionMean;
	}

	@Column(name = "locomotionMeanName", nullable = false, length = 50)
	public String getLocomotionMeanName() {
		return this.locomotionMeanName;
	}

	public void setLocomotionMeanName(String locomotionMeanName) {
		this.locomotionMeanName = locomotionMeanName;
	}

	@Column(name = "isDelete", nullable = false)
	public boolean isDelete() {
		return isDelete;
	}

	public void setDelete(boolean isDelete) {
		this.isDelete = isDelete;
	}

	// @ManyToMany(fetch = FetchType.LAZY,cascade= CascadeType.ALL)
	// @JoinTable(name = "per_loc", catalog = "jobway", joinColumns = {
	// @JoinColumn(name = "idLocomotionMean", nullable = false, updatable = false)
	// }, inverseJoinColumns = {
	// @JoinColumn(name = "idPerson", nullable = false, updatable = false) })
	@ManyToMany(mappedBy = "locomotionmeans")
	public Set<Person> getPersons() {
		return this.persons;
	}

	public void setPersons(Set<Person> persons) {
		this.persons = persons;
	}

	@Override
	public String toString() {
		return this.locomotionMeanName;
	}

	@Override
	public int hashCode() {
		return Objects.hash(idLocomotionMean, isDelete, locomotionMeanName, persons);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		LocomotionMean other = (LocomotionMean) obj;
		return Objects.equals(idLocomotionMean, other.idLocomotionMean) && isDelete == other.isDelete
				&& Objects.equals(locomotionMeanName, other.locomotionMeanName)
				&& Objects.equals(persons, other.persons);
	}

}
