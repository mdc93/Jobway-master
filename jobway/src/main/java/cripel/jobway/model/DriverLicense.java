package cripel.jobway.model;
// Generated Feb 25, 2022, 8:26:41 PM by Hibernate Tools 4.3.5.Final

import static javax.persistence.GenerationType.IDENTITY;

import java.util.HashSet;
import java.util.Objects;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;

/**
 * Driverlicense generated by hbm2java
 */
@Entity
@Table(name = "driverlicense", catalog = "jobway")
public class DriverLicense implements java.io.Serializable {

	private Integer idDriverLicense;
	private String driverLicenseType;
	private boolean isDelete;
	private Set<PerDrL> perDrls = new HashSet<>(0);

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "idDriverLicense", unique = true, nullable = false)
	public Integer getIdDriverLicense() {
		return this.idDriverLicense;
	}

	public void setIdDriverLicense(Integer idDriverLicense) {
		this.idDriverLicense = idDriverLicense;
	}

	@Column(name = "driverLicenseType", nullable = false, length = 50)
	public String getDriverLicenseType() {
		return this.driverLicenseType;
	}

	public void setDriverLicenseType(String driverLicenseType) {
		this.driverLicenseType = driverLicenseType;
	}

	@Column(name = "isDelete", nullable = false)
	public boolean isDelete() {
		return isDelete;
	}

	public void setDelete(boolean isDelete) {
		this.isDelete = isDelete;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "id.driverLicense")
	public Set<PerDrL> getPerDrL() {
		return this.perDrls;
	}

	public void setPerDrL(Set<PerDrL> perDrls) {
		this.perDrls = perDrls;
	}

	@Override
	public String toString() {
		return this.driverLicenseType;
	}

	@Override
	public int hashCode() {
		return Objects.hash(idDriverLicense);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if ((obj == null) || (getClass() != obj.getClass()))
			return false;
		DriverLicense other = (DriverLicense) obj;
		return Objects.equals(idDriverLicense, other.idDriverLicense);
	}

}
